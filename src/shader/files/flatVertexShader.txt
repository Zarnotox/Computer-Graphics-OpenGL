#version 400 core

// Variables from the VAO
layout(location=0) in vec3 position;
// Texture mapping from the vertex
//layout(location=1) in vec2 textureCoords;
// The normal of this vertex
layout(location=2) in vec3 normal;

// Output to fragment shader
// VARIABLE NAMES MATTER!
// The normal of this vertex
flat out vec3 surfaceNormal;
// The vector from this vertex aiming to the light (4 lights)
out vec3 toLightVector[4];
// The vector towards the camera
out vec3 toCameraVector;


// The injected variables from the shader java file
uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
// 4 lights
uniform vec3 lightPosition[4];

void main(void) {
	
	// Calculate the transformed location of this vertec
	vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
	
	// Position of the vertex relative to the camera
	vec4 positionRelativeToCam = viewMatrix * worldPosition;
	
	// Set position of vertex
	gl_Position = projectionMatrix * positionRelativeToCam;
	
	// Pass the transformed normal of this vertex to the fragment shader
	surfaceNormal = (transformationMatrix * vec4(normal, 0.0)).xyz;
	
	for(int i=0; i<2; i++){
		// Pass the vector towards the light, 
		toLightVector[i] = lightPosition[i] - worldPosition.xyz;
	}
	
	// Calculate the vector towards the camera
	toCameraVector = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;
	
	// Distance to the camera from this vertex
	float distance = length(positionRelativeToCam.xyz);
	
}