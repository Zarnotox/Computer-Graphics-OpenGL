#version 400 core

const int amountOfLights = 4;

const vec4 flatShadeColour = vec4(0.7, 0.7, 0.7, 1.0);

// input from the vertexShader
// VARIABLE NAMES MATTER!
// The normal of this surface
flat in vec3 surfaceNormal;
// The vector towards the light (4 lights)
in vec3 toLightVector[amountOfLights];
// Vector towards the camera
in vec3 toCameraVector;

// output the color of the pixel
layout(location = 0) out vec4 out_colour;

// The object that contains a lineair sampling algorithm
// 4 lights
uniform vec3 lightColour[amountOfLights];
uniform float wireframe;
uniform vec3 skyColour;

void main(void) {
	// Normalize vectors first
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	// Vectors to store the total sum of the diffuse lighting for each lightsource
	vec3 totalDiffuse = vec3(0.0);
	
	// All light code needs to be runned #ofLights times
	for(int i=0; i<amountOfLights; i++){
		vec3 unitLightVector = normalize(toLightVector[i]);
		// Calculate dotproduct of both vectors
		float nDot1 = dot(unitNormal, unitLightVector);
		// Make sure brightness is positive
		float brightness = max(nDot1, 0.00);
		// Calculate the light diffuse strength
		totalDiffuse = totalDiffuse + brightness * lightColour[i];
	}
	
	// We want no black spots
	totalDiffuse = max(totalDiffuse, 0.1);
	
	// Give back the pixel colour
	out_colour = vec4(totalDiffuse, 1.0) * flatShadeColour;
}