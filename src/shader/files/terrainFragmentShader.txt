#version 400 core

// input from the vertexShader
// VARIABLE NAMES MATTER!
in vec2 pass_textureCoords;
// The normal of this surface
in vec3 surfaceNormal;
// The vector towards the light (2 lights)
in vec3 toLightVector[2];
// Vector towards the camera
in vec3 toCameraVector;
// Visibility factor
in float visibility;

// output the color of the pixel
out vec4 out_colour;

// The object that contains a lineair sampling algorithm
uniform sampler2D textureSampler;
// 2 lights
uniform vec3 lightColour[2];
uniform vec3 attenuation[2];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

void main(void) {

	// Normalize vectors first
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	// Vectors to store the total sum of the diffuse and specular lighting for each lightsource
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	// All light code needs to be runned #ofLights times
	for(int i = 0; i<2; i++){
		// calculate attenuation factor
		float distance = length(toLightVector[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
	
		vec3 unitLightVector = normalize(toLightVector[i]);
		
		// Calculate dotproduct of both vectors
		float nDot1 = dot(unitNormal, unitLightVector);
		// Make sure brightness stays positive
		float brightness = max(nDot1, 0.00);
		
		// The direction from where the light comes
		vec3 lightDirection = -unitLightVector;
		// Calculate the reflected light vector with the vector from the lightsource
		// and the normal
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		
		// Calculate the difference between the reflected light vector and the vector
		// towards the camera
		float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
		// No negative values
		specularFactor = max(specularFactor, 0.0);
		
		// Fizzle with the damping
		float dampedFactor = pow(specularFactor, shineDamper);
		// Calculate the total specular colour strength
		totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[i]) / attFactor;
		// Calculate the total light diffuse strength
		totalDiffuse = totalDiffuse + (brightness * lightColour[i]) / attFactor;
	}
	
	// We want no black spots
	totalDiffuse = max(totalDiffuse, 0.05);
	
	// Sample the texture pixel on the model
	// Merge the light colour with the texture
	out_colour = vec4(totalDiffuse, 1.0) * texture(textureSampler, pass_textureCoords) + vec4(totalSpecular, 1.0);
	
	// Add the skycolour to the final pixel colour
	out_colour = mix(vec4(skyColour,1.0), out_colour, visibility);
}