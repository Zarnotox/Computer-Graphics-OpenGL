#version 400 core

const vec4 wireframeColour = vec4(0.7, 0.7, 0.7, 1.0);

// input from the vertexShader
// VARIABLE NAMES MATTER!
in vec2 pass_textureCoords;
// The normal of this surface
in vec3 surfaceNormal;
// The vector towards the light
in vec3 toLightVector;
// Vector towards the camera
in vec3 toCameraVector;
// Visibility factor
in float visibility;

// output the color of the pixel
layout(location = 0) out vec4 out_colour;

// The object that contains a lineair sampling algorithm
uniform sampler2D textureSampler;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;
uniform float wireframe;
uniform vec3 skyColour;

void main(void) {

	// Check for wireframe mode
	if(wireframe > 0.5) {
		// Overwrite the output colour
		out_colour = wireframeColour;
		// Add the skycolour to the final pixel colour
		out_colour = mix(vec4(skyColour,1.0), out_colour, visibility);
		return;
	}

	// Normalize vectors first
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	// Calculate dotproduct of both vectors
	float nDot1 = dot(unitNormal, unitLightVector);
	// We want no black spots
	float brightness = max(nDot1, 0.05);
	// Calculate the light diffuse strength
	vec3 diffuse = brightness * lightColour;
	
	// The direction from where the light comes
	vec3 lightDirection = -unitLightVector;
	// Calculate the reflected light vector with the vector from the lightsource
	// and the normal
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	
	// Calculate the difference between the reflected light vector and the vector
	// towards the camera
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	// No black spots!
	specularFactor = max(specularFactor, 0.0);
	
	// Fizzle with the damping
	float dampedFactor = pow(specularFactor, shineDamper);
	// Calculate the specular colour strength
	vec3 finalSpecular = dampedFactor * reflectivity * lightColour;
	
	// Generate the color for this pixel
	vec4 textureColour = texture2D(textureSampler, pass_textureCoords);
	
	// Test transparancy
	if(textureColour.a < 0.5) {
		// Discard this part of the texture
		discard;
	}
	
	// Sample the texture pixel on the model
	// Merge the light colour with the texture
	out_colour = vec4(diffuse, 1.0) * textureColour + vec4(finalSpecular, 1.0);
	
	// Add the skycolour to the final pixel colour
	out_colour = mix(vec4(skyColour,1.0), out_colour, visibility);
}